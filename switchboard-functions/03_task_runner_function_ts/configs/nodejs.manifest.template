# SPDX-License-Identifier: LGPL-3.0-or-later

# Node.js manifest file example

{% set arch_libdir = "/lib/x86_64-linux-gnu" %}
{% set log_level = "error" %}

loader.log_level = "{{ log_level }}"

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "/usr/bin/node"
loader.argv = ["/usr/bin/node", "--unhandled-rejections=warn", "--max-old-space-size=88", "/sgx/nodejs/index.js"]

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"

# See https://gramine.readthedocs.io/en/latest/devel/performance.html#glibc-malloc-tuning
loader.env.MALLOC_ARENA_MAX = "1"

loader.env.PATH = "/bin:/usr/bin"
loader.env.IS_SIMULATION = { passthrough = true }
loader.env.CLUSTER = { passthrough = true }
loader.env.RPC_URL = { passthrough = true }
loader.env.PAYER = { passthrough = true }
loader.env.FUNCTION_KEY = { passthrough = true }
loader.env.FUNCTION_DATA = { passthrough = true }
loader.env.FUNCTION_REQUEST_KEY = { passthrough = true }
loader.env.FUNCTION_REQUEST_DATA = { passthrough = true }
loader.env.QUEUE_AUTHORITY = { passthrough = true }
loader.env.VERIFIER = { passthrough = true }
loader.env.VERIFIER_ENCLAVE_SIGNER = { passthrough = true }
loader.env.REWARD_RECEIVER = { passthrough = true }
loader.env.CHAIN_ID = { passthrough = true }
loader.env.VERIFYING_CONTRACT = { passthrough = true }
loader.env.FUNCTION_PARAMS = { passthrough = true }
loader.env.FUNCTION_CALL_IDS = { passthrough = true }

# Node.js requires eventfd2() emulation otherwise fails on `(uv_loop_init(&tracing_loop_)) == (0)'
sys.insecure__allow_eventfd = true

loader.pal_internal_mem_size = "128M"
# Node.js expects around 1.7GB of heap on startup, see https://github.com/nodejs/node/issues/13018
sgx.enclave_size = "512M"
# sgx.enclave_size = "128M"

sgx.max_threads = 32
sgx.nonpie_binary = true
sgx.edmm_enable = {{ 'false' }}
sgx.remote_attestation = "dcap"

fs.mounts = [
    { uri = "file:{{ gramine.runtimedir() }}", path = "/lib" },
    { uri = "file:{{ arch_libdir }}", path = "{{ arch_libdir }}" },
    { uri = "file:/usr/{{ arch_libdir }}", path = "/usr/{{ arch_libdir }}" },
    { uri = "file:/usr", path = "/usr" },
    { uri = "file:/lib64", path = "/lib64" },
    { uri = "file:/etc", path = "/etc" },

    # SSL
    { uri = "file:/usr/lib/ssl/certs", path = "/usr/lib/ssl/certs" },

    # NodeJS / App
    { uri = "file:/usr/bin/node", path = "/usr/bin/node" },
    { uri = "file:/sgx/nodejs/index.js", path = "/sgx/nodejs/index.js" },
]

sgx.trusted_files = [
    "file:{{ gramine.libos }}",
    "file:{{ gramine.runtimedir() }}/",
    "file:{{ arch_libdir }}/",
    "file:/usr/{{ arch_libdir }}/",
    "file:/lib64/",

    "file:/sgx/nodejs/index.js",
    "file:/usr/bin/node",
]


sgx.allowed_files = [
    "file:/etc/ssl/openssl.cnf",
    "file:/etc/hosts",
    "file:/etc/host.conf",
    "file:/etc/gai.conf",
    "file:/etc/resolv.conf",
    "file:/etc/localtime",
    "file:/etc/nsswitch.conf"
]