# SPDX-License-Identifier: LGPL-3.0-or-later

# Bun manifest file example

{% set arch_libdir = "/lib/x86_64-linux-gnu" %}
{% set log_level = "all" %}

loader.log_level = "{{ log_level }}"

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "/sgx/bun-function"
loader.argv = ["/sgx/bun-function", "--smol"]

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
loader.env.PATH = "/bin:/usr/bin"

loader.env.IS_SIMULATION = { passthrough = true }
loader.env.CLUSTER = { passthrough = true }
loader.env.RPC_URL = { passthrough = true }
loader.env.PAYER = { passthrough = true }
loader.env.FUNCTION_KEY = { passthrough = true }
loader.env.FUNCTION_DATA = { passthrough = true }
loader.env.FUNCTION_REQUEST_KEY = { passthrough = true }
loader.env.FUNCTION_REQUEST_DATA = { passthrough = true }
loader.env.QUEUE_AUTHORITY = { passthrough = true }
loader.env.VERIFIER = { passthrough = true }
loader.env.VERIFIER_ENCLAVE_SIGNER = { passthrough = true }
loader.env.REWARD_RECEIVER = { passthrough = true }
loader.env.CHAIN_ID = { passthrough = true }
loader.env.VERIFYING_CONTRACT = { passthrough = true }
loader.env.FUNCTION_PARAMS = { passthrough = true }
loader.env.FUNCTION_CALL_IDS = { passthrough = true }

# Node.js requires eventfd2() emulation otherwise fails on `(uv_loop_init(&tracing_loop_)) == (0)'
sys.insecure__allow_eventfd = true

# See https://gramine.readthedocs.io/en/latest/devel/performance.html#glibc-malloc-tuning
loader.env.MALLOC_ARENA_MAX = "1"

sgx.enclave_size = "256M"
sgx.edmm_enable = {{ 'false' }}
sgx.max_threads = 32
sgx.remote_attestation = "dcap"
sgx.nonpie_binary = true

fs.mounts = [
  { uri = "file:{{ gramine.runtimedir() }}", path = "/lib" },
  { uri = "file:{{ arch_libdir }}", path = "{{ arch_libdir }}" },
  { uri = "file:/usr", path = "/usr" },
  { uri = "file:/lib64", path = "/lib64" },
  { uri = "file:/etc", path = "/etc" },

  { uri = "file:/sgx", path = "/sgx" },
]

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/usr/{{ arch_libdir }}/",
  "file:/lib64/",

  "file:/sgx/",
]